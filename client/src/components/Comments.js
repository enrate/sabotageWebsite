import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import {
  Box,
  Typography,
  TextField,
  Button,
  Avatar,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Divider,
  Paper
} from '@mui/material';
import {
  Send as SendIcon,
  Reply as ReplyIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  EmojiEmotions as EmojiIcon,
  Person as PersonIcon
} from '@mui/icons-material';
import Loader from './Loader';

const Comments = ({ newsId }) => {
  const { currentUser } = useAuth();
  console.log('Comments rendered', currentUser, newsId);
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [replyTo, setReplyTo] = useState(null);
  const [editingComment, setEditingComment] = useState(null);
  const [editContent, setEditContent] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –≠–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Å—Ç–∞–≤–∫–∏
  const emojis = [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá',
    'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
    'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
    'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£',
    'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨',
    'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó',
    'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üòØ', 'üò¶', 'üòß',
    'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢',
    'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üí©', 'üëª', 'üíÄ',
    '‚ò†Ô∏è', 'üëΩ', 'üëæ', 'ü§ñ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ',
    'üôÄ', 'üòø', 'üòæ', 'üôà', 'üôâ', 'üôä', 'üíå', 'üíò', 'üíù', 'üíñ',
    'üíó', 'üíì', 'üíû', 'üíï', 'üíü', '‚ù£Ô∏è', 'üíî', '‚ù§Ô∏è', 'üß°', 'üíõ',
    'üíö', 'üíô', 'üíú', 'üñ§', 'üíØ', 'üí¢', 'üí•', 'üí´', 'üí¶', 'üí®',
    'üï≥Ô∏è', 'üí¨', 'üó®Ô∏è', 'üóØÔ∏è', 'üí≠', 'üí§', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã',
    'üññ', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà',
    'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ',
    'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üí™', 'ü¶æ',
    'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑',
    'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üíß', 'üí¶', 'üí®',
    'üí©', 'üíØ', 'üí¢', 'üí•', 'üí´', 'üí¶', 'üí®', 'üï≥Ô∏è', 'üí¨', 'üó®Ô∏è',
    'üóØÔ∏è', 'üí≠', 'üí§', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§å',
    'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï',
    'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå',
    'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂',
    'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è',
    'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üíß', 'üí¶', 'üí®', 'üí©', 'üíØ', 'üí¢',
    'üí•', 'üí´', 'üí¶', 'üí®', 'üï≥Ô∏è', 'üí¨', 'üó®Ô∏è', 'üóØÔ∏è', 'üí≠', 'üí§'
  ];

  useEffect(() => {
    setLoading(true);
    fetchComments();
  }, [newsId]);

  const fetchComments = async () => {
    try {
      const response = await axios.get(`/api/comments/news/${newsId}`);
      setComments(response.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmitComment = async () => {
    if (!newComment.trim()) return;

    try {
      const token = localStorage.getItem('token');
      const response = await axios.post('/api/comments', {
        content: newComment,
        newsId,
        parentId: replyTo?.id || null
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (replyTo) {
        setComments(prevComments => prevComments.map(comment =>
          comment.id === replyTo.id
            ? { ...comment, replies: [...(comment.replies || []), response.data] }
            : comment
        ));
      } else {
        setComments(prevComments => [response.data, ...prevComments]);
      }

      setNewComment('');
      setReplyTo(null);
    } catch (err) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    }
  };

  const handleEditComment = async () => {
    if (!editContent.trim()) return;

    try {
      const token = localStorage.getItem('token');
      const response = await axios.put(`/api/comments/${editingComment.id}`, {
        content: editContent
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (editingComment.parentId) {
        setComments(prevComments => prevComments.map(comment => {
          if (comment.replies && comment.replies.some(r => r.id === editingComment.id)) {
            return {
              ...comment,
              replies: comment.replies.map(r => r.id === editingComment.id ? response.data : r)
            };
          }
          return comment;
        }));
      } else {
        setComments(prevComments => prevComments.map(comment =>
          comment.id === editingComment.id ? response.data : comment
        ));
      }

      setEditingComment(null);
      setEditContent('');
    } catch (err) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    }
  };

  const handleDeleteComment = async (commentId) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')) return;

    try {
      const token = localStorage.getItem('token');
      await axios.delete(`/api/comments/${commentId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      setComments(prevComments => prevComments
        .map(comment => {
          if (comment.replies && comment.replies.some(r => r.id === commentId)) {
            return {
              ...comment,
              replies: comment.replies.filter(r => r.id !== commentId)
            };
          }
          return comment;
        })
        .filter(comment => comment.id !== commentId)
      );
    } catch (err) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    }
  };

  const handleEmojiClick = (emoji) => {
    if (editingComment) {
      setEditContent(editContent + emoji);
    } else {
      setNewComment(newComment + emoji);
    }
    setShowEmojiPicker(false);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const canEditComment = (comment) => {
    return currentUser && (comment.user.id === currentUser.id || currentUser.role === 'admin');
  };

  const canDeleteComment = (comment) => {
    return currentUser && (comment.user.id === currentUser.id || currentUser.role === 'admin');
  };

  return (
    <Paper
      elevation={8}
      sx={{
        p: 4,
        mb: 4,
        background: 'rgba(0, 0, 0, 0.3)',
        borderRadius: 3,
        backdropFilter: 'blur(10px)',
        border: '1px solid rgba(255, 179, 71, 0.2)'
      }}
    >
      <Typography variant="h6" sx={{ color: '#ffb347', mb: 3 }}>
        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({comments.length})
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {loading && comments.length === 0 ? (
        <Loader />
      ) : <>
      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ replyTo) */}
      {currentUser && !replyTo && (
        <Paper sx={{ p: 3, mb: 3, bgcolor: 'rgba(0, 0, 0, 0.2)', border: '1px solid rgba(255, 179, 71, 0.2)' }}>
          <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
            <IconButton 
              onClick={() => setShowEmojiPicker(!showEmojiPicker)}
              sx={{ color: '#ffb347' }}
            >
              <EmojiIcon />
            </IconButton>
          </Box>
          {showEmojiPicker && (
            <Box sx={{ 
              mb: 2, 
              p: 2, 
              bgcolor: 'rgba(0, 0, 0, 0.3)', 
              borderRadius: 2,
              border: '1px solid rgba(255, 179, 71, 0.2)',
              maxHeight: 200,
              overflow: 'auto'
            }}>
              <Typography variant="subtitle2" sx={{ color: '#ffb347', mb: 1 }}>
                –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏:
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                {emojis.map((emoji, index) => (
                  <Chip
                    key={index}
                    label={emoji}
                    onClick={() => handleEmojiClick(emoji)}
                    sx={{
                      cursor: 'pointer',
                      fontSize: '1.2rem',
                      '&:hover': {
                        bgcolor: 'rgba(255, 179, 71, 0.2)'
                      }
                    }}
                  />
                ))}
              </Box>
            </Box>
          )}
          <TextField
            fullWidth
            multiline
            rows={3}
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
            sx={{
              '& .MuiOutlinedInput-root': {
                '& fieldset': {
                  borderColor: 'rgba(255, 179, 71, 0.3)',
                },
                '&:hover fieldset': {
                  borderColor: '#ffb347',
                },
                '&.Mui-focused fieldset': {
                  borderColor: '#ffb347',
                },
              },
              '& .MuiInputLabel-root': {
                color: 'rgba(255, 255, 255, 0.7)',
              },
              '& .MuiInputBase-input': {
                color: '#fff',
              },
            }}
          />
          <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
            <Button
              variant="contained"
              onClick={handleSubmitComment}
              disabled={loading || !newComment.trim()}
              startIcon={<SendIcon />}
              sx={{
                bgcolor: '#ffb347',
                color: '#000',
                '&:hover': {
                  bgcolor: '#ffd580'
                }
              }}
            >
              {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
            </Button>
          </Box>
        </Paper>
      )}
      {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
      {comments.map((comment) => (
        <Paper key={comment.id} sx={{ p: 3, mb: 2, bgcolor: 'rgba(0, 0, 0, 0.2)', border: '1px solid rgba(255, 179, 71, 0.2)' }}>
          <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2 }}>
            <Avatar
              src={comment.user.avatar}
              sx={{
                bgcolor: comment.user.avatar ? 'transparent' : '#ffb347',
                width: 40,
                height: 40
              }}
            >
              {!comment.user.avatar && <PersonIcon />}
            </Avatar>

            <Box sx={{ flex: 1 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                <Typography variant="subtitle2" sx={{ color: '#ffb347', fontWeight: 600 }}>
                  {comment.user.username}
                </Typography>
                <Typography variant="caption" sx={{ color: 'rgba(255, 255, 255, 0.6)' }}>
                  {formatDate(comment.createdAt)}
                </Typography>
              </Box>

              {editingComment?.id === comment.id ? (
                <Box>
                  <TextField
                    fullWidth
                    multiline
                    rows={2}
                    value={editContent}
                    onChange={(e) => setEditContent(e.target.value)}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        '& fieldset': {
                          borderColor: 'rgba(255, 179, 71, 0.3)',
                        },
                        '&:hover fieldset': {
                          borderColor: '#ffb347',
                        },
                        '&.Mui-focused fieldset': {
                          borderColor: '#ffb347',
                        },
                      },
                      '& .MuiInputBase-input': {
                        color: '#fff',
                      },
                    }}
                  />
                  <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>
                    <Button
                      size="small"
                      onClick={handleEditComment}
                      disabled={loading}
                      sx={{ bgcolor: '#ffb347', color: '#000' }}
                    >
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                    <Button
                      size="small"
                      onClick={() => {
                        setEditingComment(null);
                        setEditContent('');
                      }}
                      sx={{ color: 'rgba(255, 255, 255, 0.7)' }}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                  </Box>
                </Box>
              ) : (
                <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 2 }}>
                  {comment.content}
                </Typography>
              )}

              <Box sx={{ display: 'flex', gap: 1 }}>
                {currentUser && (
                  <Button
                    size="small"
                    startIcon={<ReplyIcon />}
                    onClick={() => setReplyTo(comment)}
                    sx={{
                      color: 'rgba(255, 255, 255, 0.7)',
                      '&:hover': {
                        bgcolor: 'rgba(255, 255, 255, 0.1)'
                      }
                    }}
                  >
                    –û—Ç–≤–µ—Ç–∏—Ç—å
                  </Button>
                )}

                {canEditComment(comment) && (
                  <Button
                    size="small"
                    startIcon={<EditIcon />}
                    onClick={() => {
                      setEditingComment(comment);
                      setEditContent(comment.content);
                    }}
                    sx={{
                      color: 'rgba(255, 255, 255, 0.7)',
                      '&:hover': {
                        bgcolor: 'rgba(255, 255, 255, 0.1)'
                      }
                    }}
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                )}

                {canDeleteComment(comment) && (
                  <Button
                    size="small"
                    startIcon={<DeleteIcon />}
                    onClick={() => handleDeleteComment(comment.id)}
                    sx={{
                      color: '#f44336',
                      '&:hover': {
                        bgcolor: 'rgba(244, 67, 54, 0.1)'
                      }
                    }}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </Button>
                )}
              </Box>

              {/* –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ —ç—Ç–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º */}
              {currentUser && replyTo?.id === comment.id && (
                <Paper sx={{ p: 2, mb: 2, mt: 2, bgcolor: 'rgba(255, 179, 71, 0.07)', border: '1px solid rgba(255, 179, 71, 0.2)' }}>
                  <Typography variant="body2" sx={{ color: '#ffb347', mb: 1 }}>
                    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {replyTo.user.username}:
                  </Typography>
                  <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.8)', mb: 2 }}>
                    {replyTo.content}
                  </Typography>
                  <TextField
                    fullWidth
                    multiline
                    rows={3}
                    value={newComment}
                    onChange={(e) => setNewComment(e.target.value)}
                    placeholder="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç..."
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        '& fieldset': {
                          borderColor: 'rgba(255, 179, 71, 0.3)',
                        },
                        '&:hover fieldset': {
                          borderColor: '#ffb347',
                        },
                        '&.Mui-focused fieldset': {
                          borderColor: '#ffb347',
                        },
                      },
                      '& .MuiInputLabel-root': {
                        color: 'rgba(255, 255, 255, 0.7)',
                      },
                      '& .MuiInputBase-input': {
                        color: '#fff',
                      },
                    }}
                  />
                  <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
                    <Button
                      variant="contained"
                      onClick={handleSubmitComment}
                      disabled={loading || !newComment.trim()}
                      startIcon={<SendIcon />}
                      sx={{
                        bgcolor: '#ffb347',
                        color: '#000',
                        '&:hover': {
                          bgcolor: '#ffd580'
                        }
                      }}
                    >
                      {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–≤–µ—Ç–∏—Ç—å'}
                    </Button>
                    <Button
                      variant="outlined"
                      onClick={() => setReplyTo(null)}
                      sx={{
                        borderColor: 'rgba(255, 179, 71, 0.5)',
                        color: '#ffb347',
                        '&:hover': {
                          borderColor: '#ffb347',
                          bgcolor: 'rgba(255, 179, 71, 0.1)'
                        }
                      }}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                  </Box>
                </Paper>
              )}

              {/* –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
              {comment.replies && comment.replies.length > 0 && (
                <Box sx={{ mt: 2, ml: 3 }}>
                  {comment.replies.map((reply) => (
                    <Paper key={reply.id} sx={{ p: 2, mb: 1, bgcolor: 'rgba(0, 0, 0, 0.3)', border: '1px solid rgba(255, 179, 71, 0.1)' }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2 }}>
                        <Avatar
                          src={reply.user.avatar}
                          sx={{
                            bgcolor: reply.user.avatar ? 'transparent' : '#ffb347',
                            width: 32,
                            height: 32
                          }}
                        >
                          {!reply.user.avatar && <PersonIcon />}
                        </Avatar>

                        <Box sx={{ flex: 1 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                            <Typography variant="caption" sx={{ color: '#ffb347', fontWeight: 600 }}>
                              {reply.user.username}
                            </Typography>
                            <Typography variant="caption" sx={{ color: 'rgba(255, 255, 255, 0.6)' }}>
                              {formatDate(reply.createdAt)}
                            </Typography>
                          </Box>

                          {editingComment?.id === reply.id ? (
                            <Box>
                              <TextField
                                fullWidth
                                multiline
                                rows={2}
                                value={editContent}
                                onChange={(e) => setEditContent(e.target.value)}
                                sx={{
                                  '& .MuiOutlinedInput-root': {
                                    '& fieldset': {
                                      borderColor: 'rgba(255, 179, 71, 0.3)',
                                    },
                                    '&:hover fieldset': {
                                      borderColor: '#ffb347',
                                    },
                                    '&.Mui-focused fieldset': {
                                      borderColor: '#ffb347',
                                    },
                                  },
                                  '& .MuiInputBase-input': {
                                    color: '#fff',
                                  },
                                }}
                              />
                              <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>
                                <Button
                                  size="small"
                                  onClick={handleEditComment}
                                  disabled={loading}
                                  sx={{ bgcolor: '#ffb347', color: '#000' }}
                                >
                                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                </Button>
                                <Button
                                  size="small"
                                  onClick={() => {
                                    setEditingComment(null);
                                    setEditContent('');
                                  }}
                                  sx={{ color: 'rgba(255, 255, 255, 0.7)' }}
                                >
                                  –û—Ç–º–µ–Ω–∞
                                </Button>
                              </Box>
                            </Box>
                          ) : (
                            <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 1 }}>
                              {reply.content}
                            </Typography>
                          )}

                          <Box sx={{ display: 'flex', gap: 1 }}>
                            {canEditComment(reply) && (
                              <Button
                                size="small"
                                startIcon={<EditIcon />}
                                onClick={() => {
                                  setEditingComment(reply);
                                  setEditContent(reply.content);
                                }}
                                sx={{
                                  color: 'rgba(255, 255, 255, 0.7)',
                                  fontSize: '0.75rem'
                                }}
                              >
                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                              </Button>
                            )}

                            {canDeleteComment(reply) && (
                              <Button
                                size="small"
                                startIcon={<DeleteIcon />}
                                onClick={() => handleDeleteComment(reply.id)}
                                sx={{
                                  color: '#f44336',
                                  fontSize: '0.75rem'
                                }}
                              >
                                –£–¥–∞–ª–∏—Ç—å
                              </Button>
                            )}
                          </Box>
                        </Box>
                      </Box>
                    </Paper>
                  ))}
                </Box>
              )}
            </Box>
          </Box>
        </Paper>
      ))}
      {comments.length === 0 && !loading && (
        <Paper sx={{ p: 3, textAlign: 'center', bgcolor: 'rgba(0, 0, 0, 0.2)', border: '1px solid rgba(255, 179, 71, 0.2)' }}>
          <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.6)' }}>
            –ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!
          </Typography>
        </Paper>
      )}
      </>}
    </Paper>
  );
};

export default Comments; 