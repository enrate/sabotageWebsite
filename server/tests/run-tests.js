#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Sabotage Website Backend...\n');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
function checkRequiredFiles() {
  log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤...', 'blue');
  
  const requiredFiles = [
    'package.json',
    'tests/setup.js',
    'tests/models/User.test.js',
    'tests/controllers/authController.test.js',
    'tests/controllers/youtubeController.test.js',
    'tests/middleware/authMiddleware.test.js',
    'tests/services/emailService.test.js',
    'tests/integration/api.test.js',
    'tests/utils/helpers.test.js',
  ];

  const missingFiles = [];
  
  requiredFiles.forEach(file => {
    if (!fs.existsSync(path.join(__dirname, '..', file))) {
      missingFiles.push(file);
    }
  });

  if (missingFiles.length > 0) {
    log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:', 'red');
    missingFiles.forEach(file => log(`   - ${file}`, 'red'));
    process.exit(1);
  }

  log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã', 'green');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
async function runTests() {
  const testCategories = [
    {
      name: '–ú–æ–¥–µ–ª–∏',
      pattern: 'tests/models/**/*.test.js',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö'
    },
    {
      name: '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã',
      pattern: 'tests/controllers/**/*.test.js',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤'
    },
    {
      name: 'Middleware',
      pattern: 'tests/middleware/**/*.test.js',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ü–û'
    },
    {
      name: '–°–µ—Ä–≤–∏—Å—ã',
      pattern: 'tests/services/**/*.test.js',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏'
    },
    {
      name: '–£—Ç–∏–ª–∏—Ç—ã',
      pattern: 'tests/utils/**/*.test.js',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π'
    },
    {
      name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ',
      pattern: 'tests/integration/**/*.test.js',
      description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API'
    }
  ];

  const results = [];
  let totalTests = 0;
  let totalPassed = 0;
  let totalFailed = 0;

  for (const category of testCategories) {
    log(`\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${category.name}`, 'cyan');
    log(`   ${category.description}`, 'yellow');

    try {
      const startTime = Date.now();
      const result = execSync(`npx jest ${category.pattern} --silent --json`, {
        encoding: 'utf8',
        cwd: path.join(__dirname, '..'),
        stdio: 'pipe'
      });

      const endTime = Date.now();
      const duration = ((endTime - startTime) / 1000).toFixed(2);

      const testResult = JSON.parse(result);
      const passed = testResult.numPassedTests;
      const failed = testResult.numFailedTests;
      const total = testResult.numTotalTests;

      totalTests += total;
      totalPassed += passed;
      totalFailed += failed;

      if (failed === 0) {
        log(`‚úÖ ${category.name}: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ (${duration}s)`, 'green');
      } else {
        log(`‚ùå ${category.name}: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏, ${failed} —É–ø–∞–ª–∏ (${duration}s)`, 'red');
      }

      results.push({
        category: category.name,
        passed,
        failed,
        total,
        duration,
        success: failed === 0
      });

    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ ${category.name}:`, 'red');
      log(error.message, 'red');
      
      results.push({
        category: category.name,
        passed: 0,
        failed: 1,
        total: 1,
        duration: 0,
        success: false
      });
      
      totalFailed++;
    }
  }

  return { results, totalTests, totalPassed, totalFailed };
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
function generateReport(results, totalTests, totalPassed, totalFailed) {
  log('\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò', 'bright');
  log('='.repeat(50), 'blue');

  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const color = result.success ? 'green' : 'red';
    
    log(`${status} ${result.category}:`, color);
    log(`   –ü—Ä–æ—à–ª–æ: ${result.passed}/${result.total} (${((result.passed/result.total)*100).toFixed(1)}%)`);
    log(`   –í—Ä–µ–º—è: ${result.duration}s`);
    log('');
  });

  log('–ò–¢–û–ì–û:', 'bright');
  log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`, 'blue');
  log(`   –ü—Ä–æ—à–ª–æ: ${totalPassed}`, 'green');
  log(`   –£–ø–∞–ª–æ: ${totalFailed}`, 'red');
  
  const successRate = totalTests > 0 ? ((totalPassed / totalTests) * 100).toFixed(1) : 0;
  log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate >= 80 ? 'green' : 'yellow');

  if (totalFailed === 0) {
    log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!', 'green');
    return true;
  } else {
    log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –£–ü–ê–õ–ò', 'yellow');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
function checkCoverage() {
  log('\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞...', 'blue');
  
  try {
    execSync('npx jest --coverage --silent', {
      cwd: path.join(__dirname, '..'),
      stdio: 'pipe'
    });

    // –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
    const coveragePath = path.join(__dirname, '..', 'coverage', 'lcov-report', 'index.html');
    if (fs.existsSync(coveragePath)) {
      log('‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', 'green');
      log(`   –§–∞–π–ª: ${coveragePath}`, 'yellow');
    }
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏:', 'red');
    log(error.message, 'red');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    checkRequiredFiles();
    
    const { results, totalTests, totalPassed, totalFailed } = await runTests();
    const success = generateReport(results, totalTests, totalPassed, totalFailed);
    
    checkCoverage();
    
    if (!success) {
      log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'cyan');
      log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ', 'yellow');
      log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞', 'yellow');
      log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'yellow');
      log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å —Ñ–ª–∞–≥–æ–º --verbose –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞', 'yellow');
    }

    process.exit(success ? 0 : 1);
  } catch (error) {
    log('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', 'red');
    log(error.message, 'red');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  main();
}

module.exports = { runTests, generateReport }; 