require('dotenv').config();
const axios = require('axios');
const { User } = require('../models');

const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY || 'YOUR_YOUTUBE_API_KEY';

// –ò–∑–≤–ª–µ–∫–∞–µ–º YouTube –∫–∞–Ω–∞–ª ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫
exports.extractChannelId = function(url) {
  const patterns = [
    // https://www.youtube.com/channel/UC...
    /youtube\.com\/channel\/([a-zA-Z0-9_-]+)/,
    // https://www.youtube.com/c/ChannelName
    /youtube\.com\/c\/([^\/\?]+)/,
    // https://www.youtube.com/@username
    /youtube\.com\/@([^\/\?]+)/,
    // https://www.youtube.com/user/username
    /youtube\.com\/user\/([^\/\?]+)/
  ];

  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) {
      return match[1];
    }
  }
  
  return null;
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ ID –∏–ª–∏ username
async function getChannelInfo(identifier, originalUrl) {
  console.log('üîç –ò—â–µ–º –∫–∞–Ω–∞–ª —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º:', identifier);
  console.log('üîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:', originalUrl);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ channel ID
    console.log('üì° –ó–∞–ø—Ä–æ—Å 1: –ü–æ–∏—Å–∫ –ø–æ channel ID...');
    let response = await axios.get('https://www.googleapis.com/youtube/v3/channels', {
      params: {
        part: 'snippet',
        id: identifier,
        key: YOUTUBE_API_KEY
      }
    });

    console.log('üìä –û—Ç–≤–µ—Ç API (channel ID):', {
      items: response.data.items?.length || 0,
      status: response.status
    });

    if (response.data.items && response.data.items.length > 0) {
      console.log('‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –ø–æ ID:', response.data.items[0].snippet.title);
      return response.data.items[0];
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ username (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
    console.log('üì° –ó–∞–ø—Ä–æ—Å 2: –ü–æ–∏—Å–∫ –ø–æ username...');
    response = await axios.get('https://www.googleapis.com/youtube/v3/channels', {
      params: {
        part: 'snippet',
        forUsername: identifier,
        key: YOUTUBE_API_KEY
      }
    });

    console.log('üìä –û—Ç–≤–µ—Ç API (username):', {
      items: response.data.items?.length || 0,
      status: response.status
    });

    if (response.data.items && response.data.items.length > 0) {
      console.log('‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –ø–æ username:', response.data.items[0].snippet.title);
      return response.data.items[0];
    }

    // –î–ª—è @username –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
    if (identifier.startsWith('@') || originalUrl.includes('/@')) {
      console.log('üì° –ó–∞–ø—Ä–æ—Å 3: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ @username –∫–∞–Ω–∞–ª–∞...');
      
      // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
      const cleanUsername = identifier.startsWith('@') ? identifier.substring(1) : identifier;
      
      response = await axios.get('https://www.googleapis.com/youtube/v3/search', {
        params: {
          part: 'snippet',
          q: `@${cleanUsername}`,
          type: 'channel',
          maxResults: 5,
          key: YOUTUBE_API_KEY
        }
      });

      console.log('üìä –û—Ç–≤–µ—Ç API (—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ @username):', {
        items: response.data.items?.length || 0,
        status: response.status
      });

      if (response.data.items && response.data.items.length > 0) {
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        const exactMatch = response.data.items.find(item => {
          const channelTitle = item.snippet.title.toLowerCase();
          const channelHandle = item.snippet.channelHandle?.toLowerCase() || '';
          const searchUsername = cleanUsername.toLowerCase();
          
          return channelTitle.includes(searchUsername) || 
                 channelHandle.includes(searchUsername) ||
                 channelHandle === `@${searchUsername}`;
        });

        if (exactMatch) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', exactMatch.snippet.title);
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
          const channelResponse = await axios.get('https://www.googleapis.com/youtube/v3/channels', {
            params: {
              part: 'snippet',
              id: exactMatch.snippet.channelId,
              key: YOUTUBE_API_KEY
            }
          });

          if (channelResponse.data.items && channelResponse.data.items.length > 0) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:', channelResponse.data.items[0].snippet.title);
            return channelResponse.data.items[0];
          }
        } else {
          console.log('‚ö†Ô∏è –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
          const firstResult = response.data.items[0];
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
          const channelResponse = await axios.get('https://www.googleapis.com/youtube/v3/channels', {
            params: {
              part: 'snippet',
              id: firstResult.snippet.channelId,
              key: YOUTUBE_API_KEY
            }
          });

          if (channelResponse.data.items && channelResponse.data.items.length > 0) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:', channelResponse.data.items[0].snippet.title);
            return channelResponse.data.items[0];
          }
        }
      }
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫
      console.log('üì° –ó–∞–ø—Ä–æ—Å 3: –û–±—â–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ search API...');
      response = await axios.get('https://www.googleapis.com/youtube/v3/search', {
        params: {
          part: 'snippet',
          q: identifier,
          type: 'channel',
          maxResults: 1,
          key: YOUTUBE_API_KEY
        }
      });

      console.log('üìä –û—Ç–≤–µ—Ç API (search):', {
        items: response.data.items?.length || 0,
        status: response.status
      });

      if (response.data.items && response.data.items.length > 0) {
        const searchResult = response.data.items[0];
        console.log('‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ search:', searchResult.snippet.title);
        
        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        const channelResponse = await axios.get('https://www.googleapis.com/youtube/v3/channels', {
          params: {
            part: 'snippet',
            id: searchResult.snippet.channelId,
            key: YOUTUBE_API_KEY
          }
        });

        if (channelResponse.data.items && channelResponse.data.items.length > 0) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:', channelResponse.data.items[0].snippet.title);
          return channelResponse.data.items[0];
        }
      }
    }

    console.log('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:', {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data
    });
    return null;
  }
}

// –ü—Ä–∏–≤—è–∑–∞—Ç—å YouTube –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ
exports.linkYoutubeByUrl = async (req, res) => {
  try {
    const { youtubeUrl } = req.body;
    const userId = req.user.id;

    if (!youtubeUrl) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∫–∞–Ω–∞–ª' });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
    const channelId = exports.extractChannelId(youtubeUrl);
    
    if (!channelId) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –∫–∞–Ω–∞–ª' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    const channelInfo = await getChannelInfo(channelId, youtubeUrl);
    
    if (!channelInfo) {
      return res.status(404).json({ error: 'YouTube –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const { id: youtubeId, snippet } = channelInfo;
    const channelName = snippet.title;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const channelUrl = youtubeUrl;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
    await User.update({
      youtubeId: youtubeId,
      youtubeUsername: channelName,
      youtubeUrl: channelUrl // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    }, { where: { id: userId } });

    res.json({ 
      success: true, 
      channelName, 
      channelUrl,
      message: 'YouTube –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!' 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ YouTube:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ YouTube –∫–∞–Ω–∞–ª–∞' });
  }
};

// –û—Ç–≤—è–∑–∞—Ç—å YouTube
exports.unlinkYoutube = async (req, res) => {
  try {
    await User.update({ 
      youtubeId: null, 
      youtubeUsername: null,
      youtubeUrl: null
    }, { where: { id: req.user.id } });
    
    res.json({ success: true, message: 'YouTube –∫–∞–Ω–∞–ª –æ—Ç–≤—è–∑–∞–Ω' });
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ YouTube' });
  }
}; 