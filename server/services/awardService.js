const { Award, User, UserAward, Season } = require('../models');

class AwardService {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ø–æ —É—Å–ª–æ–≤–∏—è–º
  static async autoAssignAwardsByConditions() {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥...');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º
      const awards = await Award.findAll({
        where: {
          isActive: true,
          assignmentType: ['automatic', 'conditional']
        }
      });

      let totalAssigned = 0;
      const results = [];

      for (const award of awards) {
        console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã: ${award.name}`);
        
        const result = await this.processAward(award);
        results.push(result);
        totalAssigned += result.assignedCount;
      }

      console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: ${totalAssigned}`);
      
      return {
        success: true,
        totalAssigned,
        results
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
  static async processAward(award) {
    const result = {
      awardId: award.id,
      awardName: award.name,
      assignedCount: 0,
      errors: [],
      details: []
    };

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await User.findAll();

      for (const user of users) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ª–æ–≤–∏—è–º
          const isEligible = await award.checkEligibility(user);
          
          if (isEligible) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –Ω–∞–≥—Ä–∞–¥—É
            const existingAward = await UserAward.findOne({
              where: { userId: user.id, awardId: award.id }
            });

            if (!existingAward && await award.canAssignToUser()) {
              await UserAward.create({
                userId: user.id,
                awardId: award.id,
                issuedBy: 1, // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥
                issuedAt: new Date(),
                seasonId: award.seasonId
              });

              result.assignedCount++;
              result.details.push({
                userId: user.id,
                username: user.username,
                assigned: true
              });
            } else {
              result.details.push({
                userId: user.id,
                username: user.username,
                assigned: false,
                reason: existingAward ? '–£–∂–µ –ø–æ–ª—É—á–µ–Ω–∞' : '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç'
              });
            }
          } else {
            result.details.push({
              userId: user.id,
              username: user.username,
              assigned: false,
              reason: '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º'
            });
          }
        } catch (userError) {
          result.errors.push({
            userId: user.id,
            username: user.username,
            error: userError.message
          });
        }
      }
    } catch (error) {
      result.errors.push({
        error: error.message
      });
    }

    return result;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  static async checkNewUserAwards(user) {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º
      const awards = await Award.findAll({
        where: {
          isActive: true,
          assignmentType: ['automatic', 'conditional']
        }
      });

      let assignedCount = 0;

      for (const award of awards) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ª–æ–≤–∏—è–º
          const isEligible = await award.checkEligibility(user);
          
          if (isEligible) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –Ω–∞–≥—Ä–∞–¥—É
            const existingAward = await UserAward.findOne({
              where: { userId: user.id, awardId: award.id }
            });

            if (!existingAward && await award.canAssignToUser()) {
              await UserAward.create({
                userId: user.id,
                awardId: award.id,
                issuedBy: 1, // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥
                issuedAt: new Date(),
                seasonId: award.seasonId
              });

              assignedCount++;
              console.log(`üéñÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: ${award.name}`);
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–≥—Ä–∞–¥—ã ${award.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}:`, error);
        }
      }

      return assignedCount;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async checkUserStatsAwards(user) {
    try {
      console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const { Op } = require('sequelize');
      const awards = await Award.findAll({
        where: {
          isActive: true,
          assignmentType: ['automatic', 'conditional'],
          [Op.or]: [
            { minMatches: { [Op.ne]: null } },
            { minWins: { [Op.ne]: null } },
            { minKills: { [Op.ne]: null } },
            { minElo: { [Op.ne]: null } }
          ]
      });

      let assignedCount = 0;

      for (const award of awards) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ª–æ–≤–∏—è–º
          const isEligible = await award.checkEligibility(user);
          
          if (isEligible) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –Ω–∞–≥—Ä–∞–¥—É
            const existingAward = await UserAward.findOne({
              where: { userId: user.id, awardId: award.id }
            });

            if (!existingAward && await award.canAssignToUser()) {
              await UserAward.create({
                userId: user.id,
                awardId: award.id,
                issuedBy: 1, // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥
                issuedAt: new Date(),
                seasonId: award.seasonId
              });

              assignedCount++;
              console.log(`üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${award.name}`);
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–≥—Ä–∞–¥—ã ${award.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}:`, error);
        }
      }

      return assignedCount;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–≥—Ä–∞–¥ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤
  static async createEarlyRegistrationAward(seasonId, deadline, description = null) {
    try {
      const season = await Season.findByPk(seasonId);
      if (!season) {
        throw new Error('–°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const award = await Award.create({
        type: 'early_registration',
        name: `–†–∞–Ω–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞–Ω—Ç - ${season.name}`,
        description: description || `–ù–∞–≥—Ä–∞–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ ${new Date(deadline).toLocaleDateString()}`,
        category: 'season',
        isSeasonAward: true,
        assignmentType: 'automatic',
        registrationDeadline: new Date(deadline),
        seasonId: seasonId,
        priority: 10
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤: ${award.name}`);
      return award;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
  static async createMatchesAward(seasonId, minMatches, description = null) {
    try {
      const season = await Season.findByPk(seasonId);
      if (!season) {
        throw new Error('–°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const award = await Award.create({
        type: 'matches_achievement',
        name: `–ò–≥—Ä–æ–∫ —Å–µ–∑–æ–Ω–∞ - ${minMatches}+ –º–∞—Ç—á–µ–π`,
        description: description || `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ ${minMatches} –∏–ª–∏ –±–æ–ª–µ–µ –º–∞—Ç—á–∞—Ö –≤ —Å–µ–∑–æ–Ω–µ ${season.name}`,
        category: 'season',
        isSeasonAward: true,
        assignmentType: 'automatic',
        minMatches: minMatches,
        seasonId: seasonId,
        priority: 5
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∞—Ç—á–∏: ${award.name}`);
      return award;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞—Ç—á–∏:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
  static async createWinsAward(seasonId, minWins, description = null) {
    try {
      const season = await Season.findByPk(seasonId);
      if (!season) {
        throw new Error('–°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const award = await Award.create({
        type: 'wins_achievement',
        name: `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Å–µ–∑–æ–Ω–∞ - ${minWins}+ –ø–æ–±–µ–¥`,
        description: description || `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ ${minWins} –∏–ª–∏ –±–æ–ª–µ–µ –ø–æ–±–µ–¥ –≤ —Å–µ–∑–æ–Ω–µ ${season.name}`,
        category: 'season',
        isSeasonAward: true,
        assignmentType: 'automatic',
        minWins: minWins,
        seasonId: seasonId,
        priority: 8
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—ã: ${award.name}`);
      return award;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—ã:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ ELO
  static async createEloAward(seasonId, minElo, description = null) {
    try {
      const season = await Season.findByPk(seasonId);
      if (!season) {
        throw new Error('–°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const award = await Award.create({
        type: 'elo_achievement',
        name: `–≠–ª–∏—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ - ${minElo}+ ELO`,
        description: description || `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ ${minElo} –∏–ª–∏ –≤—ã—à–µ –≤ —Å–µ–∑–æ–Ω–µ ${season.name}`,
        category: 'season',
        isSeasonAward: true,
        assignmentType: 'automatic',
        minElo: minElo,
        seasonId: seasonId,
        priority: 9
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ ELO: ${award.name}`);
      return award;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ ELO:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≥—Ä–∞–¥
  static async getAwardsStatistics() {
    try {
      const awards = await Award.findAll({
        where: { isActive: true },
        include: [
          {
            model: Season,
            as: 'season',
            attributes: ['id', 'name']
          }
        ]
      });

      const stats = [];

      for (const award of awards) {
        const recipientsCount = await UserAward.count({
          where: { awardId: award.id }
        });

        stats.push({
          id: award.id,
          name: award.name,
          category: award.category,
          assignmentType: award.assignmentType,
          recipientsCount,
          maxRecipients: award.maxRecipients,
          isLimited: award.maxRecipients !== null,
          season: award.season ? award.season.name : null
        });
      }

      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≥—Ä–∞–¥:', error);
      throw error;
    }
  }
}

module.exports = AwardService; 