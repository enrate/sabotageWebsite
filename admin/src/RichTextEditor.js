import React, { useState, useRef, useEffect } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import {
  Box,
  Typography,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  IconButton,
  Tooltip,
  Chip
} from '@mui/material';
import {
  Image as ImageIcon,
  VideoLibrary as VideoIcon,
  EmojiEmotions as EmojiIcon,
  Link as LinkIcon
} from '@mui/icons-material';

const RichTextEditor = ({ value, onChange, placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..." }) => {
  const [showImageDialog, setShowImageDialog] = useState(false);
  const [showVideoDialog, setShowVideoDialog] = useState(false);
  const [imageUrl, setImageUrl] = useState('');
  const [videoUrl, setVideoUrl] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [editorKey, setEditorKey] = useState(0);
  const quillRef = useRef(null);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const modules = {
    toolbar: [
      [{ 'header': [1, 2, 3, false] }],
      ['bold', 'italic', 'underline'],
      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
      ['link'],
      ['clean']
    ]
  };

  const formats = [
    'header',
    'bold', 'italic', 'underline',
    'list', 'bullet',
    'link'
  ];

  // –≠–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Å—Ç–∞–≤–∫–∏
  const emojis = [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá',
    'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
    'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
    'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£',
    'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨',
    'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó',
    'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üòØ', 'üò¶', 'üòß',
    'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢',
    'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üí©', 'üëª', 'üíÄ',
    '‚ò†Ô∏è', 'üëΩ', 'üëæ', 'ü§ñ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ',
    'üôÄ', 'üòø', 'üòæ', 'üôà', 'üôâ', 'üôä', 'üíå', 'üíò', 'üíù', 'üíñ',
    'üíó', 'üíì', 'üíû', 'üíï', 'üíü', '‚ù£Ô∏è', 'üíî', '‚ù§Ô∏è', 'üß°', 'üíõ',
    'üíö', 'üíô', 'üíú', 'üñ§', 'üíØ', 'üí¢', 'üí•', 'üí´', 'üí¶', 'üí®',
    'üï≥Ô∏è', 'üí¨', 'üó®Ô∏è', 'üóØÔ∏è', 'üí≠', 'üí§', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã',
    'üññ', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà',
    'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ',
    'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üí™', 'ü¶æ',
    'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑',
    'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üíß', 'üí¶', 'üí®',
    'üí©', 'üíØ', 'üí¢', 'üí•', 'üí´', 'üí¶', 'üí®', 'üï≥Ô∏è', 'üí¨', 'üó®Ô∏è',
    'üóØÔ∏è', 'üí≠', 'üí§', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§å',
    'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï',
    'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå',
    'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂',
    'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è',
    'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üíß', 'üí¶', 'üí®', 'üí©', 'üíØ', 'üí¢',
    'üí•', 'üí´', 'üí¶', 'üí®', 'üï≥Ô∏è', 'üí¨', 'üó®Ô∏è', 'üóØÔ∏è', 'üí≠', 'üí§'
  ];

  const handleImageInsert = () => {
    if (imageUrl.trim() && quillRef.current) {
      try {
        const range = quillRef.current.getSelection();
        if (range) {
          quillRef.current.insertEmbed(range.index, 'image', imageUrl);
        }
        setImageUrl('');
        setShowImageDialog(false);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      }
    }
  };

  const handleVideoInsert = () => {
    if (videoUrl.trim() && quillRef.current) {
      try {
        const range = quillRef.current.getSelection();
        if (range) {
          quillRef.current.insertEmbed(range.index, 'video', videoUrl);
        }
        setVideoUrl('');
        setShowVideoDialog(false);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤–∏–¥–µ–æ:', error);
      }
    }
  };

  const handleEmojiClick = (emoji) => {
    if (quillRef.current) {
      try {
        const range = quillRef.current.getSelection();
        if (range) {
          quillRef.current.insertText(range.index, emoji);
        }
        setShowEmojiPicker(false);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —ç–º–æ–¥–∑–∏:', error);
      }
    }
  };

  return (
    <Box>
      {/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
      <Box sx={{ mb: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
        <Tooltip title="–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
          <IconButton 
            onClick={() => setShowImageDialog(true)}
            sx={{ color: '#ffb347' }}
          >
            <ImageIcon />
          </IconButton>
        </Tooltip>
        
        <Tooltip title="–í—Å—Ç–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ">
          <IconButton 
            onClick={() => setShowVideoDialog(true)}
            sx={{ color: '#ffb347' }}
          >
            <VideoIcon />
          </IconButton>
        </Tooltip>
        
        <Tooltip title="–≠–º–æ–¥–∑–∏">
          <IconButton 
            onClick={() => setShowEmojiPicker(!showEmojiPicker)}
            sx={{ color: '#ffb347' }}
          >
            <EmojiIcon />
          </IconButton>
        </Tooltip>
      </Box>

      {/* –≠–º–æ–¥–∑–∏ –ø–∞–Ω–µ–ª—å */}
      {showEmojiPicker && (
        <Box sx={{ 
          mb: 2, 
          p: 2, 
          bgcolor: 'rgba(0, 0, 0, 0.3)', 
          borderRadius: 2,
          border: '1px solid rgba(255, 179, 71, 0.2)',
          maxHeight: 200,
          overflow: 'auto'
        }}>
          <Typography variant="subtitle2" sx={{ color: '#ffb347', mb: 1 }}>
            –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏:
          </Typography>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
            {emojis.map((emoji, index) => (
              <Chip
                key={index}
                label={emoji}
                onClick={() => handleEmojiClick(emoji)}
                sx={{
                  cursor: 'pointer',
                  fontSize: '1.2rem',
                  '&:hover': {
                    bgcolor: 'rgba(255, 179, 71, 0.2)'
                  }
                }}
              />
            ))}
          </Box>
        </Box>
      )}

      {/* –†–µ–¥–∞–∫—Ç–æ—Ä */}
      <Box sx={{
        '& .ql-container': {
          borderColor: 'rgba(255, 179, 71, 0.3)',
          borderRadius: '0 0 4px 4px',
          bgcolor: 'rgba(0, 0, 0, 0.2)',
          color: '#fff',
          minHeight: '200px'
        },
        '& .ql-toolbar': {
          borderColor: 'rgba(255, 179, 71, 0.3)',
          borderRadius: '4px 4px 0 0',
          bgcolor: 'rgba(0, 0, 0, 0.3)',
          '& .ql-stroke': {
            stroke: '#ffb347'
          },
          '& .ql-fill': {
            fill: '#ffb347'
          },
          '& .ql-picker': {
            color: '#ffb347'
          },
          '& .ql-picker-options': {
            bgcolor: 'rgba(0, 0, 0, 0.9)',
            borderColor: 'rgba(255, 179, 71, 0.3)'
          },
          '& .ql-picker-label': {
            color: '#ffb347'
          },
          '& .ql-picker-item': {
            color: '#fff'
          }
        },
        '& .ql-editor': {
          minHeight: '200px',
          color: '#fff',
          fontSize: '14px',
          lineHeight: '1.6',
          '& img': {
            maxWidth: '100%',
            height: 'auto'
          },
          '& video': {
            maxWidth: '100%',
            height: 'auto'
          },
          '& p': {
            margin: '0 0 8px 0'
          },
          '& h1, & h2, & h3, & h4, & h5, & h6': {
            margin: '16px 0 8px 0',
            color: '#ffb347'
          }
        },
        '& .ql-editor.ql-blank::before': {
          color: 'rgba(255, 255, 255, 0.5)',
          fontStyle: 'italic'
        }
      }}>
        <ReactQuill
          ref={quillRef}
          value={value || ''}
          onChange={onChange}
          modules={modules}
          formats={formats}
          placeholder={placeholder}
          theme="snow"
          preserveWhitespace
        />
      </Box>

      {/* –î–∏–∞–ª–æ–≥ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <Dialog open={showImageDialog} onClose={() => setShowImageDialog(false)}>
        <DialogTitle sx={{ color: '#ffb347' }}>–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</DialogTitle>
        <DialogContent>
          <TextField
            label="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            fullWidth
            sx={{
              '& .MuiOutlinedInput-root': {
                '& fieldset': {
                  borderColor: 'rgba(255, 179, 71, 0.3)',
                },
                '&:hover fieldset': {
                  borderColor: '#ffb347',
                },
                '&.Mui-focused fieldset': {
                  borderColor: '#ffb347',
                },
              },
              '& .MuiInputLabel-root': {
                color: 'rgba(255, 255, 255, 0.7)',
              },
              '& .MuiInputBase-input': {
                color: '#fff',
              },
            }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowImageDialog(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleImageInsert} variant="contained" sx={{ bgcolor: '#ffb347', color: '#000' }}>
            –í—Å—Ç–∞–≤–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –≤—Å—Ç–∞–≤–∫–∏ –≤–∏–¥–µ–æ */}
      <Dialog open={showVideoDialog} onClose={() => setShowVideoDialog(false)}>
        <DialogTitle sx={{ color: '#ffb347' }}>–í—Å—Ç–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ</DialogTitle>
        <DialogContent>
          <TextField
            label="URL –≤–∏–¥–µ–æ"
            value={videoUrl}
            onChange={(e) => setVideoUrl(e.target.value)}
            fullWidth
            sx={{
              '& .MuiOutlinedInput-root': {
                '& fieldset': {
                  borderColor: 'rgba(255, 179, 71, 0.3)',
                },
                '&:hover fieldset': {
                  borderColor: '#ffb347',
                },
                '&.Mui-focused fieldset': {
                  borderColor: '#ffb347',
                },
              },
              '& .MuiInputLabel-root': {
                color: 'rgba(255, 255, 255, 0.7)',
              },
              '& .MuiInputBase-input': {
                color: '#fff',
              },
            }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowVideoDialog(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleVideoInsert} variant="contained" sx={{ bgcolor: '#ffb347', color: '#000' }}>
            –í—Å—Ç–∞–≤–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default RichTextEditor; 